import 'dart:async';

Future<void> main(List<String> arguments) async {
  Future.delayed(duration, () {
    
  },)
  Timer.periodic(duration, callback)
}

// [⏰ 타이머 & 알람 프로그램 ⏰]


// 안녕하세요! 저는 시간 요정 ‘타이메리(Timery)’입니다. 오늘 당신의 시간을 관리해 드릴게요! 🕒

// 1. 타이머 설정
// 2. 알람 설정
// 3. 프로그램 종료

// 원하시는 작업 번호를 입력하세요: 1
// 1. 타이머 설정
// 사용자가 타이머를 설정할 때


// [⏱️ 타이머 설정 ⏱️]

// 타이머 시간을 입력하세요! (단위: 초) 예: 10
// 입력한 시간: 10초

// [💡 확인] 10초 타이머를 시작합니다. 준비되셨나요? (Y/N): Y
// 타이머가 시작됩니다! 🎉

// 10... 9... 8... (카운트다운 진행 중) 🕒

// [⏰ 타이머 완료! ⏰]
// 딩동! 10초가 지났습니다. 🎉

// 다음 작업을 선택해주세요!
// 1. 다시 타이머 설정
// 2. 메인 메뉴로 돌아가기
// 작업 번호를 입력하세요: 2
// 타이머 중 취소할 때


// [⏱️ 타이머 설정 ⏱️]

// 타이머 시간을 입력하세요! (단위: 초) 예: 20
// 입력한 시간: 20초

// [💡 확인] 20초 타이머를 시작합니다. 준비되셨나요? (Y/N): Y
// 타이머가 시작됩니다! 🎉

// 15... 14... 13... 🕒

// [⛔ 타이머 중지 요청!]
// 사용자가 타이머를 중지했습니다. 😅
// 2. 알람 설정
// 사용자가 알람을 설정할 때


// [⏰ 알람 설정 ⏰]

// 알람을 설정할 시간을 입력하세요! (HH:MM 형식, 24시간제) 예: 14:30
// 입력한 시간: 14:30

// [✅ 확인 완료] 알람이 설정되었습니다! 🎉
// - 알람이 울리면 당신께 알려드릴게요. 잊지 말고 기다려 주세요! 😊
// 알람 시간이 되었을 때


// [🔔 알람 알림 🔔]

// 딩동! 지금은 14:30입니다. ⏰
// 일어나세요! 해야 할 일이 기다리고 있어요! 💪

// 1. 알람 다시 설정
// 2. 메인 메뉴로 돌아가기
// 작업 번호를 입력하세요: 2
// 3. 프로그램 종료

// [🚪 프로그램 종료 🚪]

// 시간 요정 타이메리가 물러갑니다. 오늘도 시간을 잘 활용하셨나요? 🕒
// 다음에 또 만나요! 👋


/**
 * 사용자 실행 흐름 예시
전체 흐름
사용자: 1번 선택 → 타이머 30초 설정.

카운트다운:

코드 복사
30... 29... 28... 🕒
타이머 종료:

css
코드 복사
[⏰ 타이머 완료! ⏰]
딩동! 30초가 지났습니다. 🎉
사용자: 2번 선택 → 알람 15:00 설정.

15:00이 되었을 때 알람 울림:

css
코드 복사
[🔔 알람 알림 🔔]
지금은 15:00입니다. 일어나세요! 🕒
사용자: 프로그램 종료.
 */